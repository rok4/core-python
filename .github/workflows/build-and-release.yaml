name: Test, build and release artefacts, build documentation

on:
  push:
    tags:
      - '**'

jobs:

  # create_release:
  #   name: Create Release
  #   runs-on: ubuntu-latest
  #   outputs:
  #     upload_url: ${{ steps.create_release.outputs.upload_url }}
  #     job_status: ${{ job.status }}
  #   steps:
  #     - name: Checkout project
  #       uses: actions/checkout@v3

  #     - name: Create Release
  #       id: create_release
  #       uses: actions/create-release@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         tag_name: ${{ github.ref_name }} 
  #         release_name: Release ${{ github.ref_name }} 
  #         body_path: CHANGELOG.md
  #         draft: false
  #         prerelease: false

  build_and_test:

    name: Test and build artefacts
    # needs: create_release
    outputs:
      job_status: ${{ job.status }}
    strategy:
      max-parallel: 2
      fail-fast: true
      matrix:
        # python-version: ["3.8", "3.9", "3.10"]
        # os: ["ubuntu-20.04", "ubuntu-22.04"]
        python-version: ["3.8", "3.9"]
        os: ["ubuntu-20.04"]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout project
        uses: actions/checkout@v3

      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ matrix.os }}-${{ matrix.python-version }}

      - name: Configure Poetry
        run: |
          poetry config settings.virtualenvs.in-project false
          poetry config virtualenvs.options.system-site-packages true
          poetry config settings.virtualenvs.path ~/.virtualenvs
          poetry self add poetry-bumpversion
          poetry version ${{ github.ref_name }} 

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root -E doc

      - uses: actions/cache@v3
        name: Cache system dependencies
        id: cache-sysdeps
        with:
          path: "~/deps"
          key: sysdeps-${{ matrix.os }}-${{ matrix.python-version }}

      - name: Copy system dependencies
        if: steps.cache-sysdeps.outputs.cache-hit == 'true'
        run: sudo cp --verbose --force --recursive ~/deps/* /

      - name: Install system dependencies
        if: steps.cache-sysdeps.outputs.cache-hit != 'true'
        run: |
          sudo apt update
          sudo apt -y install python3-rados python3-gdal
          mkdir -p ~/deps
          sudo dpkg -L python3-rados | while IFS= read -r f; do if test -f $f; then echo $f; fi; done | xargs cp --parents --target-directory ~/deps/
          sudo dpkg -L python3-gdal | while IFS= read -r f; do if test -f $f; then echo $f; fi; done | xargs cp --parents --target-directory ~/deps/

      - name: Install python dependencies
        run: poetry install --no-interaction --no-root -E doc
        if: steps.cache.outputs.cache-hit != 'true'

      - name: Run unit tests
        if: "(${{ matrix.os }}=='ubuntu-20.04')&&(${{ matrix.python-version }}=='3.8')"
        run: |
          source .venv/bin/activate
          coverage run -m pytest
          coverage report -m
          coverage html -d dist/tests/

      - name: Build package
        if: "(${{ matrix.os }}=='ubuntu-20.04')&&(${{ matrix.python-version }}=='3.8')"
        run: poetry build

      - name: Build documentation
        if: "(${{ matrix.os }}=='ubuntu-20.04')&&(${{ matrix.python-version }}=='3.8')"
        run: |
          source .venv/bin/activate
          pdoc3 --html --output-dir dist/ rok4

      - name: Upload packages, tests results and documentation
        if: "(${{ matrix.os }}=='ubuntu-20.04')&&(${{ matrix.python-version }}=='3.8')"
        uses: actions/upload-artifact@v3
        with:
          name: dist-py3
          path: dist/
          if-no-files-found: error
          retention-days: 1

  publish_artefacts:
    name: Add built artefacts to release
    needs: build_and_test
    # if: "always()&&(needs.create_release.outputs.job_status=='success')&&(needs.build_and_test.outputs.job_status=='success')" 
    if: "always()&&(needs.build_and_test.outputs.job_status=='success')" 
    runs-on: ubuntu-latest

    steps:

      - uses: actions/download-artifact@v3
        with:
          name: dist-py3
          path: dist/

      - name: Artefact content
        run: |
          ls -R dist
      # - name: Add wheel package to release
      #   id: upload-release-asset 
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ needs.create_release.outputs.upload_url }}
      #     asset_path: ./dist/rok4-${{ github.ref_name }}-py3-none-any.whl
      #     asset_name: rok4-${{ github.ref_name }}-py3-none-any.whl
      #     asset_content_type: application/zip

      # - name: Add tarball package to release
      #   id: upload-release-asset 
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ needs.create_release.outputs.upload_url }}
      #     asset_path: ./dist/rok4-${{ github.ref_name }}.tar.gz
      #     asset_name: rok4-${{ github.ref_name }}.tar.gz
      #     asset_content_type: application/zip


  # publish_documentation:
  #   name: Add documentation and unit tests results into gh-pages branch
  #   needs: build_and_test
  #   if: "always()&&(needs.create_release.outputs.job_status=='success')&&(needs.build_and_test.outputs.job_status=='success')" 
  #   runs-on: ubuntu-latest

  #   steps:

  #     - name: Checkout project on gh-pages
  #       uses: actions/checkout@v3
  #       with:
  #         ref: 'gh-pages'

  #     - uses: actions/download-artifact@v3
  #       with:
  #         name: dist-py3
  #         path: docs/versions/

      # - name: Publish on gh-pages branch
      #   run: |
      #     git config user.name github-actions
      #     git config user.email github-actions@github.com
      #     git add dist/${{ github.ref_name }}/html/rok4
      #     git commit -m "Add documentation for version ${{ github.ref_name }}"
      #     git push origin `git subtree split --prefix dist/${{ github.ref_name }}/html/rok4`:gh-pages --force

  # delete_version:
  #   name: Remove release and tag if error occured
  #   needs: build_and_test
  #   if: "always()&&(needs.create_release.outputs.job_status=='success')&&(needs.build_and_test.outputs.job_status!='success')" 
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Remove release and tag
  #       uses: dev-drprasad/delete-tag-and-release@v0.2.0
  #       with:
  #         tag_name: ${{ github.ref_name }}
  #         delete_release: true
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

